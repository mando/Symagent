<?xml version="1.0" encoding="UTF-8"?>

<xsl:stylesheet
 version="2.0"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
>

<!--
$Id: Build.xsl 1 2008-01-10 18:37:05Z smoot $
AgentSDK - transform to generate the build script

Paco NATHAN paco@symbiot.com
Dan CAMPER dan@bti.net

@LICENSE@
 -->

<xsl:output
 method="text"
 omit-xml-declaration="yes"
 indent="no"
/>
<xsl:strip-space
 elements="*"
/>


<xsl:template
 match="agentsdk"
>
<xsl:text>#!/bin/bash

######################################################################
# AgentSDK - build script, generated by Ant

# libsymbiot libraries will be installed into LIB_INSTALL_DIR/lib
# libsymbiot header files will be installed into LIB_INSTALL_DIR/include

LIB_INSTALL_DIR="@SYMAGENT.LIB@"

# Agent binaries will be installed into AGENT_INSTALL_DIR/bin

AGENT_INSTALL_DIR="@SYMAGENT.LIB@"

# Logs will be created LOG_DIR; that directory will be created
# on-the-fly if necessary when the first log entry is written

LOG_DIR="@LOG.DIR@"

# Configuration base directory.

CONF_DIR="@CONFIG.BASEDIR@"

# The name of the appliance/server

#SERVERNAME=`hostname`
SERVERNAME="@FQDN@"

# INSTALL_STARTUP_SCRIPTS determines if startup scripts are automatically
# installed (1), or not (0).

INSTALL_STARTUP_SCRIPTS=1

SCRIPT=$0
ORIG=$PWD
ROOT=`dirname $SCRIPT`

######################################################################
# main entry point

if [ "$#" -lt 1 ]
then
    echo "ERROR: not enough args"
    exit 1
fi

for arg in $*
do

</xsl:text>

<xsl:apply-templates
/>

<xsl:text>
done

######################################################################
# put us back where we started

cd $ORIG
echo "====> Build Finished"
</xsl:text>
</xsl:template>


<xsl:template
 match="component"
>
<xsl:for-each
 select="instance[@enabled = 'true']"
>
<xsl:variable
 name="name"
>
<xsl:value-of
 select="../@name"
/>
<xsl:text>: </xsl:text>
<xsl:value-of
 select="@name"
/>
</xsl:variable>

<xsl:variable
 name="path"
>
<xsl:text>
cd $ORIG
cd $ROOT/</xsl:text>
<xsl:value-of
 select="../@location"
/>
<xsl:text>/</xsl:text>
<xsl:value-of
 select="@location"
/>
</xsl:variable>

<xsl:for-each
 select="../command"
>
<xsl:variable
 name="echo"
><xsl:text>echo "====> </xsl:text>
<xsl:value-of
 select="@description"
/>
<xsl:text> - </xsl:text>
<xsl:value-of
 select="$name"
/>
<xsl:text> ..."</xsl:text>
</xsl:variable>

<xsl:text>
if test "$arg" = "</xsl:text>
<xsl:value-of
 select="@name"
/>
<xsl:text>"; then
</xsl:text>

<xsl:value-of
 select="$echo"
/>

<xsl:value-of
 select="$path"
/>
<xsl:value-of
 select="text()"
/>

<xsl:value-of
 select="$echo"
/>
<xsl:text> "done"
</xsl:text>

<xsl:text>fi
</xsl:text>
</xsl:for-each>

</xsl:for-each>
</xsl:template>


</xsl:stylesheet>
